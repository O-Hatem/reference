##git commands##

git config --global user.email "omarhatem651@gmail.com"
	- config my username in git and github so i can commit

git clone [ssh | https]

git status (in your ide terminal)
	- tells you what changes have you done to the repository since you last committed.
	- shows some info as 
		- what got added, deleted, or modified.
		- what branch you are currently working on

git add .
	- makes git track all the changes 
	- running (git status) again and the changes will appear in green indicating it's been tracked(but not yet committed)

git commit -m "commit message"
git commit -m "commit message" -m "commit description"
	- saves the changes but still locally

git commit -am "commit message"
	- -a is shortcut to (git add .)
	- it add and commits the changes
	- only works for modified files

git push origin master
	- origin: stands for the location of the git remote repository
	- master: is the branch you push to

git init
	- initialize a git repository to the current folder
	- you uses this if you want add git to the folder

git remote add origin (ssh-key)
	- add a reference to the remote repository on github
	- a initiated git repository is useless if not connected to a live repository
	- so you use this command to add the folder to a live repository using ssh-key

git remote -v
	- shows any remote repositories that connected to this repository
	- shows if it's connected to any live repository

git push -u origin master
git push --set-upstream origin master 
	- -u creates upstream, makes it the default behavior to push command

git branch
	- shows all the current branches in the repository
	- a start beside a branch indicates that is the branch I'm working on right now

git branch -d (branch-name)
	- deletes the branch specified

git checkout
	- it used to switch between branches

git checkout -b (branch name)
	-creates a new branch

git diff
	- shows all the changes made since the last commit

git diff (branch-name)
	- shows the difference between the current working branch and the specified one in the command

git merge (branch-name)
	- merge the branch specified to the active branch

git log
	- arranged in reverse chronological order

git reset [files names]
	- with no argument it will unstage all the changes
	- with file names specified, it will unstage the specified files only

git reset HEAD~1
	- HEAD refers to the last commit 
	- HEAD~1 refers to the commit before the last
	- so the command will redo the changes till the commit before the last

git reset (hash code for a certain commit)
	- the command will redo the changes till the commit specified with the hash code

git reset --hard (hash code)
	- will do the same as above plus it will remove any changes
	- normally it won't remove the changes, it will just unstage them so to remove them completely you use --hard

##Notes##
you got two ways to update the master branch with the new changes in another branch
	1- first is to commit the changes to the secondary branch and then merge secondary branch into the master
	2- second is to commit the changes then push it to github and request a pr


* we make a pr from the feature branch to the master branch
  after you merged the pr on github you still need to pull the new changes into the ide (git pull origin master)

* you need to commit changes in the master before merging a branch

* when a conflict occurs, you should commit your changes before switching to another branch

if you encountered a conflict there are several ways to solve it:
	1- using the github gui
	2- using terminal
	3- directly in your ide

* forking is when the same concept as branching but for whole repository so you can have full access to it and make changes as you want
  then you can request a pr to the original repository


##terminology##
repo = repository
pr = pull request


##git errors##
fatal: 'origin' does not appear to be a git repository
	# when you create a repo locally and try to push it (since it's not defined on github)
	# solution:
		- create a repo with the same name on github
		- connect the local repo to the live repo using (git remote add origin ssh-key)
		- use (git remote -v) to check if it's connected successfully 
		- use (git push -u origin master) to make it the default behavior in the repo
